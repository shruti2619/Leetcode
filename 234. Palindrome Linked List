/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    ListNode* reverse(ListNode* head){
        ListNode* prev= NULL;
        ListNode* curr= head;
        ListNode* next= curr->next;
        while(curr!=NULL){
            next= curr->next;
            curr->next= prev;
            prev= curr;
            curr=next;
        }
        return prev;
    }
    
    ListNode* middle(ListNode* head){
        ListNode* slow= head;
        ListNode* fast= head->next;
        
        while(fast!=NULL && fast->next!=NULL){
            slow= slow->next;
            fast= fast->next->next;
        }
        return slow;
    }
    
    bool isPalindrome(ListNode* head) {
        
        if(head->next==NULL) return true;
        
        ListNode* mid= middle(head);
        mid->next= reverse(mid->next);
        
        ListNode* temp = mid->next;
        
        while(temp!=NULL){
            if(temp->val!= head->val) {
                mid->next= reverse(mid->next);
                return false;
            }
            temp= temp->next;
            head= head->next;
        }
        mid->next= reverse(mid->next);
        return true;
    }
};
