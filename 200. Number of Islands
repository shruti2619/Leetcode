class Solution {
public:
    void bfs(int row, int col, vector<vector<int>>& visited, vector<vector<char>> grid, int m, int n){
        visited[row][col]=1;
        queue<pair<int, int>> q;
        q.push({row, col});
        while(!q.empty()){
            int row= q.front().first;
            int col= q.front().second;
            q.pop();
              for(int delrow=-1; delrow<=1; delrow++){
                 for(int delcol=-1; delcol<=1; delcol++){
                        if(abs(delrow)!= abs(delcol)){
                            int newrow= row+ delrow;
                            int newcol= col+ delcol;
                            if(newrow>=0 && newrow<n && newcol>=0 && newcol<m && grid[newrow][newcol]=='1' 
                            && !visited[newrow][newcol]){
                                q.push({newrow, newcol});
                                visited[newrow][newcol]=1;
                            }
                        }
                 }
             }
        }

    }

    int numIslands(vector<vector<char>>& grid) {
        int count=0;
        int n= grid.size(), m= grid[0].size();
        vector<vector<int>> visited(n, vector<int>(m,0));
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(!visited[i][j] && grid[i][j]=='1'){
                    bfs(i, j , visited, grid,m,n);
                    count++;
                }
            }
        }
        return count;
    }
};
